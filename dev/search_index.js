var documenterSearchIndex = {"docs":
[{"location":"api/#CircleFit-API","page":"API","title":"CircleFit API","text":"","category":"section"},{"location":"api/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [CircleFit]\nOrder = [:type,:function]","category":"page"},{"location":"api/#CircleFit.Circle","page":"API","title":"CircleFit.Circle","text":"Circle\n\nRepresents a fitted circle characterized by position (center position of the fitted circle)  and radius  of the fitted circle. The field points refers to the data the model is fit to.  Points are stored as a matrix (number of points, number of dimensions). \n\nTo get the coefficients one can use StatsBase.coef  and coefficient names are provided by StatsBase.coefnames\n\nCurrently only in 2D.\n\n\n\n\n\n","category":"type"},{"location":"api/#CircleFit.BCD_to_abr-Tuple{Any, Any, Any}","page":"API","title":"CircleFit.BCD_to_abr","text":"convert the parametric form of  z+Bx+Cy+D -> (x-a)²+(y-b)²-r²\n\n\n\n\n\n","category":"method"},{"location":"api/#CircleFit.GRAF-Tuple{Any, Any, Any}","page":"API","title":"CircleFit.GRAF","text":"Gradient weighted algebraic fit\n\nx: vector of x coordinates\ny: vector of y coordiantes\np0: starting values for the fit parameters(position x, position y , radius)\nkwargs are passed to LsqFit.levenberg_marquardt\n\nreturn (position x, position y , radius)\n\n\n\n\n\n","category":"method"},{"location":"api/#CircleFit.abr_to_BCD-Tuple{Any, Any, Any}","page":"API","title":"CircleFit.abr_to_BCD","text":"convert the parametric form of  z+Bx+Cy+D <- (x-a)²+(y-b)²-r²\n\n\n\n\n\n","category":"method"},{"location":"api/#CircleFit.algorithm-Tuple{Circle}","page":"API","title":"CircleFit.algorithm","text":"algorithm(model::Circle)\n\nGets the algorithm used for the model fitting. \n\n\n\n\n\n","category":"method"},{"location":"api/#CircleFit.kasa-Tuple{AbstractArray, AbstractArray}","page":"API","title":"CircleFit.kasa","text":"Fit a circle to the points provided as arrays of x and y coordinates\n\nThis method uses Kåsa's method The result is a GeometryBasics::Circle\n\n\n\n\n\n","category":"method"},{"location":"api/#CircleFit.parametric_form-Tuple{Circle}","page":"API","title":"CircleFit.parametric_form","text":"parameterize(a::Float64, b::Float64, r::Float64)\nparameterize(c::Circle)\n\nParameterizes a circle with center a, b and radius r into x, y values  (mainly for plotting purposes). \n\n\n\n\n\n","category":"method"},{"location":"api/#CircleFit.pratt-Tuple{Any, Any}","page":"API","title":"CircleFit.pratt","text":"Fit a circle by using the method of Pratt https://doi.org/10.1007/s10851-005-0482-8 Warning: not optimized\n\n\n\n\n\n","category":"method"},{"location":"api/#CircleFit.pratt_newton-Tuple{Any, Any}","page":"API","title":"CircleFit.pratt_newton","text":"Fit a circle by using the method of Pratt\n\nhttps://doi.org/10.1201/EBK1439835906\n\nhttps://people.cas.uab.edu/~mosya/cl/CircleFitByPratt.cpp\n\nhttps://link.springer.com/article/10.1007/s10851-005-0482-8\n\n\n\n\n\n","category":"method"},{"location":"api/#CircleFit.taubin-Tuple{Any, Any}","page":"API","title":"CircleFit.taubin","text":"Fit a circle by using Taubin's method https://doi.org/10.1007/s10851-005-0482-8 Warning: not optimized\n\n\n\n\n\n","category":"method"},{"location":"api/#StatsAPI.fit-Tuple{Type{Circle}, AbstractArray, AbstractArray}","page":"API","title":"StatsAPI.fit","text":"fit(::Type{Circle}, x::AbstractArray, y::AbstractArray; alg=:kasa)\n\nFit a circle to points provided as arrays of x and y coordinates using the algorithm  specified by alg (default is :kasa). Possible algorithms include \n\n:kasa for Kåsa's method [1]\n:taubin for using Taubin's method [2]\n:pratt for using Pratt's method [3]. \n:pratt_newton for using a more numerically stable Pratt's method [4]. \n\nReturns a Circle object\n\n\n\n\n\n","category":"method"},{"location":"#CircleFit-Documentation","page":"Overview","title":"CircleFit Documentation","text":"","category":"section"},{"location":"","page":"Overview","title":"Overview","text":"This package includes algorithms used for fitting circles.","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"algorithm 2D 3D source\nkasa yes no A circle fitting procedure and its error analysis\ngraf yes no Least Squares Fitting of Circles\ntaubin yes no Least Squares Fitting of Circles\npratt yes no Least Squares Fitting of Circles\npratt_newton yes no Circular and Linear Regression, C++ code, Least Squares Fitting of Circles","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Example:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"# import library\nusing CircleFit\nusing StatsBase\n\n# generate test data\nr = 5\nx0 = 2\ny0 = 4.5\nx = r.*[-1.0,0,0,1] .+ x0\ny = r.*[0.0,1,-1,0] .+ y0\n\n# fit\nresult = fit(Circle,x,y)\n\n# fitted coefficients\ncoef(result)\n# (2.0, 4.499999999999999, 5.0)\n\n# names of the coefficients\ncoefnames(result)\n# (\"center position x1\", \"center position x2\", \"radius\")\n\n# calculate the residuals square sum\nrss(result)\n# 1.5777218104420236e-30","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Gradient weighted algebraic fit for a circle using LsqFit.levenberg_marquardt: CircleFit.GRAF(x,y,p0) or fit(Circle,x,y,alg=:graf)","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Non optimized implementations:","category":"page"},{"location":"","page":"Overview","title":"Overview","text":"Method by Taubin CircleFit.taubin(x,y) or fit(Circle,x,y,alg=:taubin)\nMethod by Pratt CircleFit.pratt(x,y) or fit(Circle,x,y,alg=:pratt)","category":"page"}]
}
